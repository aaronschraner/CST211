/********************************************************************************
 * void drop();;
 * 	Purpose: 
 * 		Un-link (do not de-allocate) a node and stitch the containing
 * 		list around it.
 * 		WARNING: Node becomes inaccessible except for existing references
 * 		after this is called
 * 		If this node is the only one in the list, sets head and tail to 0
 * 	
 * 	Entry: 
 * 		nothing (but operates on this node)
 * 	
 * 	Exit: 
 * 		A still continuous list (as long as this wasn't the only node)
 * 		but missing this node
 * 		the node that called drop() is still allocated, but cannot be
 * 		accessed from the list that previously contained it
 * 	
 ********************************************************************************/
